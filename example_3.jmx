<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="ip" elementType="Argument">
            <stringProp name="Argument.name">ip</stringProp>
            <stringProp name="Argument.value">192.168.30.166</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="port" elementType="Argument">
            <stringProp name="Argument.name">port</stringProp>
            <stringProp name="Argument.value">8889</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\Program Files\apache-jmeter-5.1.1\dependencies\json-20180813.jar,D:\Program Files\apache-jmeter-5.1.1\lib\mysql-connector-java-8.0.16.jar</stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="order_id" elementType="Argument">
            <stringProp name="Argument.name">order_id</stringProp>
            <stringProp name="Argument.value">&quot;52acfb2755044a298354d9b25e2872c7&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="sender" elementType="Argument">
            <stringProp name="Argument.name">sender</stringProp>
            <stringProp name="Argument.value">&quot;5bc856d267624f0800b4aa36&quot;</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="test" elementType="Argument">
            <stringProp name="Argument.name">test</stringProp>
            <stringProp name="Argument.value">${__P(test1,)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="eports_dev config" enabled="true">
          <stringProp name="TestPlan.comments">数据库 eports_dev 配置</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="dataSource">mysql</stringProp>
          <stringProp name="dbUrl">jdbc:mysql://192.168.30.13:3306/eports_dev</stringProp>
          <stringProp name="driver">com.mysql.jdbc.Driver</stringProp>
          <stringProp name="initQuery"></stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="password">123456</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <stringProp name="username">root</stringProp>
        </JDBCDataSource>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Query Order info" enabled="true">
          <stringProp name="TestPlan.comments">查询订单的详细信息</stringProp>
          <stringProp name="dataSource">mysql</stringProp>
          <stringProp name="query">-- SELECT * FROM `order` o WHERE o.id =?
SELECT o.order_type_id,o.order_number,o.date_create,o.ship_id FROM `order` o WHERE o.id =?</stringProp>
          <stringProp name="queryArguments">${order_id}</stringProp>
          <stringProp name="queryArgumentsTypes">VARCHAR</stringProp>
          <stringProp name="queryTimeout">1000</stringProp>
          <stringProp name="queryType">Prepared Select Statement</stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
          <stringProp name="resultVariable">res</stringProp>
          <stringProp name="variableNames">order_type_id,order_number,date_create,ship_id</stringProp>
        </JDBCSampler>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters">${order_type_id_1} ${order_number_1} ${date_create_1} ${ship_id_1}</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">//log.info(&quot;------------------------------------------------------------Parameters: &quot;+Parameters);
//for(String arg:bsh.args){
//	log.info(&quot;------------------------------------------------------------arg: &quot;+arg);
//}
vars.put(&quot;order_type_id&quot;,bsh.args[0]);
vars.put(&quot;order_number&quot;,bsh.args[1]);
vars.put(&quot;date_create&quot;,bsh.args[2]);
vars.put(&quot;ship_id&quot;,bsh.args[3]);

//String test1 = bsh.args[0];
//log.info(&quot;++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ test1 = &quot;+ test1);
//${__setProperty(test0,bsh.args[0],)};

${__setProperty(order_type_id,${order_type_id_1},)};
${__setProperty(order_number,${order_number_1},)};
${__setProperty(date_create,${date_create_1},)};
${__setProperty(ship_id,${ship_id_1},)};
//log.info(&quot;------------------------------------------------------------vars.get(\&quot;order_type_id\&quot;): &quot;+vars.get(&quot;order_type_id&quot;));
//return (&quot;finished!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="username" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">testOwner@e-ports.com</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">username</stringProp>
              </elementProp>
              <elementProp name="password" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">password</stringProp>
              </elementProp>
              <elementProp name="grant_type" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">password</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">grant_type</stringProp>
              </elementProp>
              <elementProp name="scope" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">server</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">scope</stringProp>
              </elementProp>
              <elementProp name="client_id" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">app</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_id</stringProp>
              </elementProp>
              <elementProp name="client_secret" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">app</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">client_secret</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/c/oauth/token?</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">登录</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="script">import org.json.*;

String response = prev.getResponseDataAsString();

JSONObject resJson = new JSONObject(response).getJSONObject(&quot;data&quot;);

String access_token = resJson.getString(&quot;access_token&quot;);

String token_type = resJson.getString(&quot;token_type&quot;);

//JSONObject resJson2 = resJson.getJSONObject(&quot;data&quot;);

//String access_token = resJson2.getString(&quot;access_token&quot;);

//String token_type = resJson2.getString(&quot;token_type&quot;);

String first = token_type.substring(0, 1).toUpperCase();

String rest = token_type.substring(1, token_type.length());

String new_token_type = new StringBuffer(first).append(rest).toString();

String token = new_token_type + &quot; &quot; + access_token;

//access_token.append(&quot;token_type&quot;);
log.info(&quot;++++++++++++++++++++++++token: &quot;+token);

// props.put(&quot;token&quot;,token); 

vars.put(&quot;token&quot;,token);

return (&quot;finished!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1867169789">success</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.json.*;


String result = prev.getResponseDataAsString();

JSONObject response = new JSONObject(result);

//String msg = response.get(&quot;msg&quot;).toString();
//
//String code = response.getString(&quot;code&quot;);

//log.info(&quot;-------------------------------------------------------------msg: &quot;+msg +&quot;, code: &quot;+code);

if(&quot;success&quot;.equals(response.getString(&quot;msg&quot;)) &amp;&amp; &quot;0&quot;.equals(response.getString(&quot;code&quot;))){
	Failure = false;
	FailureMessage = &quot;消息返回成功！&quot;;	
//&quot;只要test.indexOf(&apos;This&apos;)返回的值不是-1，说明test字符串中包含字符串&apos;This&apos;；相反如果不包含返回的值必定是-1&quot;。
}else if(response.getString(&quot;msg&quot;).indexOf(&quot;服务连接超时&quot;) != -1 &amp;&amp; &quot;CS0001&quot;.equals(response.getString(&quot;code&quot;))){
	Failure=true;
	FailureMessage=&quot;消息返回失败：&quot;+response.getString(&quot;code&quot;);
}else{
	Failure = true;
	FailureMessage=&quot;消息返回失败—— msg: &quot;+response.getString(&quot;msg&quot;)+&quot; code: &quot;+response.getString(&quot;code&quot;);
}</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="info_Order" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;orderId&quot;: ${order_id}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/c/orders/info</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">订单详情</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">isMainAccount</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">头文件管理</stringProp>
          </HeaderManager>
          <hashTree/>
          <JDBCPreProcessor guiclass="TestBeanGUI" testclass="JDBCPreProcessor" testname="JDBC PreProcessor" enabled="false">
            <stringProp name="dataSource"></stringProp>
            <stringProp name="query"></stringProp>
            <stringProp name="queryArguments"></stringProp>
            <stringProp name="queryArgumentsTypes"></stringProp>
            <stringProp name="queryTimeout"></stringProp>
            <stringProp name="queryType">Select Statement</stringProp>
            <stringProp name="resultSetHandler">Store as String</stringProp>
            <stringProp name="resultVariable"></stringProp>
            <stringProp name="variableNames"></stringProp>
          </JDBCPreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">dc</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.orderEntries[0].dateCreate</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">import org.json.*;

String order_type_id = vars.get(&quot;order_type_id&quot;);
String order_number = vars.get(&quot;order_number&quot;);
String date_create = vars.get(&quot;date_create&quot;);
//String ship_id = vars.get(&quot;ship_id&quot;);

String response = prev.getResponseDataAsString();
log.info(&quot;++++++++++++++++++++++++++++++++++++response: &quot;+response);

JSONObject orderInfoData = new JSONObject(response).getJSONObject(&quot;data&quot;);

String oidata = orderInfoData.toString();
log.info(&quot;++++++++++++++++++++++++++++++++++++oidata: &quot;+oidata);

// props.put(&quot;token&quot;,token); 

vars.put(&quot;oidata&quot;,oidata);

String data_otd = orderInfoData.getString(&quot;orderTypeId&quot;);

String data_on = orderInfoData.getString(&quot;orderNumber&quot;);

String data_dc = orderInfoData.getString(&quot;dateCreate&quot;);

if(data_otd.equals(order_type_id)) {
	
	if(data_on.equals(order_number)) {
		
		if(data_dc.equals(date_create)) {
			
			return (&quot;date_create、order_number和order_type_id与预期结果一致！！！！！！！！！！！！！！！！！&quot;);
			
		}else{
			
			return (&quot;date_create 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
		}
		
	}else{
		
		return (&quot;order_number 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
	}
	
}else{
	
	return (&quot;order_type_id 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
}

//return (&quot;finished!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证连通性-msg" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="-1376434230">&quot;msg&quot;:&quot;success&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">验证接口的返回状态是否正常</stringProp>
            <stringProp name="Assertion.custom_message">&quot;接口‘订单详情’的联通性测试失败！&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="验证连通性-code" enabled="false">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="723322509">&quot;code&quot;:&quot;0&quot;</stringProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">验证接口的编码是否正常</stringProp>
            <stringProp name="Assertion.custom_message">&quot;连通性2失败&quot;</stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="验证dateCreate是否正确" enabled="false">
            <stringProp name="JSON_PATH">$.data.orderEntries[0].dateCreate</stringProp>
            <stringProp name="EXPECTED_VALUE">&quot;2019-06-03 17:47:46&quot;</stringProp>
            <boolProp name="JSONVALIDATION">false</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">true</boolProp>
            <stringProp name="TestPlan.comments">$.data.orderEntries[0].dateCreate</stringProp>
          </JSONPathAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="BeanShell Assertion_test" enabled="false">
            <stringProp name="BeanShellAssertion.query">//import org.json.*;
//
//String result = prev.getResponseDataAsString();
//
//JSONObject response = new JSONObject(result);
//
//String msg = response.getString(&quot;msg&quot;);
//
//String code = response.getString(&quot;code&quot;);
//
//String substr = &quot;服务连接超时&quot;;
//String str = &quot;服务连接超时-&gt;RemoteOrderFeign#findOrderInfoById(OrderIdAO,String) failed and no fallback available.&quot;;
//
//if(1==1 &amp;&amp; 2==2){
//	log.info(&quot;-------------------------------------------------------------&amp;&amp; 是对的！！！！！&quot;);
//}else{
//	log.info(&quot;-------------------------------------------------------------&amp;&amp; 是错的！！！！！&quot;);
//}
//
//if(&quot;success&quot;.equals(msg)){
//	log.info(&quot;-------------------------------------------------------------equals 是对的！！！！！&quot;);
//}else{
//	log.info(&quot;-------------------------------------------------------------equals 是错的！！！！！&quot;);
//}
//
//log.info(&quot;-------------------------------------------------------------str.indexOf(\&quot;服务连接超时\&quot;): &quot;+str.indexOf(&quot;服务连接超时&quot;));
//log.info(&quot;-------------------------------------------------------------str.indexOf(substr): &quot;+str.indexOf(substr));
//
//if(str.indexOf(&quot;服务连接超时&quot;) != -1){
//	log.info(&quot;-------------------------------------------------------------indexOf 是对的！！！！！&quot;);
//}else{
//	log.info(&quot;-------------------------------------------------------------indexOf 是错的！！！！！&quot;);
//}

String a = &quot;456&quot;;
String b = &quot;dfg&quot;;
if(&quot;123&quot;.equals(a) &amp;&amp; &quot;abc&quot;.equals(b)){
	log.info(&quot;-------------------------------------------------------------if ！！！&quot;);
}else if(&quot;456&quot;.equals(a) &amp;&amp; &quot;dfg&quot;.equals(b)){
	log.info(&quot;-------------------------------------------------------------else if ！！！！！&quot;);
}else{
	log.info(&quot;-------------------------------------------------------------else！！！！！&quot;);
}

//if(&quot;success&quot;.equals(response.getString(&quot;msg&quot;)) &amp;&amp; &quot;0&quot;.equals(response.getString(&quot;code&quot;))){
//	log.info(&quot;-------------------------------------------------------------msg1: &quot;+response.getString(&quot;msg&quot;));
//	log.info(&quot;-------------------------------------------------------------code1: &quot;+response.getString(&quot;code&quot;));
//
//}

//if(response.getString(&quot;msg&quot;).indexOf(&quot;服务连接超时&quot;) != -1){
//	
//	if(&quot;CS0001&quot;.equals(response.getString(&quot;code&quot;))){
//		log.info(&quot;++++++++++++++++++++++++++++++++++++msg2: &quot;+response.getString(&quot;msg&quot;));
//		log.info(&quot;++++++++++++++++++++++++++++++++++++code2: &quot;+response.getString(&quot;code&quot;));
//	}else{
//		log.info(&quot;++++++++++++++++++++++++++++++++++++code1: &quot;+response.getString(&quot;code&quot;));
//	}
//}else{
//	log.info(&quot;++++++++++++++++++++++++++++++++++++msg1: &quot;+response.getString(&quot;msg&quot;));
//}

</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="连通性测试" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.json.*;

log.info(&quot;-------------------------------------------------------------BeanShell Assertion is start !!!!&quot;);

String result = prev.getResponseDataAsString();

JSONObject response = new JSONObject(result);

//String msg = response.get(&quot;msg&quot;).toString();
//
//String code = response.getString(&quot;code&quot;);

//log.info(&quot;-------------------------------------------------------------msg: &quot;+msg +&quot;, code: &quot;+code);

if(&quot;success&quot;.equals(response.getString(&quot;msg&quot;)) &amp;&amp; &quot;0&quot;.equals(response.getString(&quot;code&quot;))){
	Failure = false;
	FailureMessage = &quot;消息返回成功！&quot;;	
//&quot;只要test.indexOf(&apos;This&apos;)返回的值不是-1，说明test字符串中包含字符串&apos;This&apos;；相反如果不包含返回的值必定是-1&quot;。
}else if(response.getString(&quot;msg&quot;).indexOf(&quot;服务连接超时&quot;) != -1 &amp;&amp; &quot;CS0001&quot;.equals(response.getString(&quot;code&quot;))){
	Failure=true;
	FailureMessage=&quot;消息返回失败：&quot;+response.getString(&quot;code&quot;);
}else{
	Failure = true;
	FailureMessage=&quot;消息返回失败—— msg: &quot;+response.getString(&quot;msg&quot;)+&quot; code: &quot;+response.getString(&quot;code&quot;);
}

log.info(&quot;-------------------------------------------------------------BeanShell Assertion is closed !!!!&quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters"></stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
          <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="参数验证_order_type_id" enabled="true">
            <stringProp name="BeanShellAssertion.query">import org.json.*;

log.info(&quot;-------------------------------------------------------------参数验证_order_type_id is start !!!!&quot;);

for(String arg:bsh.args){
	log.info(&quot;------------------------------------------------------------arg: &quot;+arg);
}

String order_type_id = bsh.args[0];

String order_number = bsh.args[1];

String date_create = bsh.args[2];

String ship_id = bsh.args[3];

String result = prev.getResponseDataAsString();

JSONObject orderInfoData = new JSONObject(result).getJSONObject(&quot;data&quot;);

String data_otd = orderInfoData.getString(&quot;orderTypeId&quot;);

String data_on = orderInfoData.getString(&quot;orderNumber&quot;);

String data_dc = orderInfoData.getString(&quot;dateCreate&quot;);


if(data_otd.equals(order_type_id)){
	
	if(data_on.equals(order_number)){
		
		if(data_dc.equals(date_create)){

			Failure = true;
			FailureMessage=&quot;数据验证成功！！！！！！！！！！！！！！&quot;;
			
		}else{

			Failure = true;
			FailureMessage=&quot;消息返回失败——dateCreate与数据库中查询的结果不一致！数据库中是：&quot; + date_create + &quot;, 返回的值：&quot; + data_dc;
		}
	}else{
		
		Failure = true;
		FailureMessage=&quot;消息返回失败——orderNumber与数据库中查询的结果不一致！数据库中是：&quot; + order_number + &quot;, 返回的值：&quot; + data_on;
	}
}else{
	Failure = true;
	FailureMessage=&quot;消息返回失败——orderTypeId与数据库中查询的结果不一致！数据库中是：&quot; + order_type_id + &quot;, 返回的值：&quot; + data_otd;
}



log.info(&quot;-------------------------------------------------------------参数验证_order_type_id is closed !!!!&quot;);</stringProp>
            <stringProp name="BeanShellAssertion.filename"></stringProp>
            <stringProp name="BeanShellAssertion.parameters">${__P(order_type_id,)} ${__P(order_number,)} ${__P(date_create,)} ${__P(ship_id,)}</stringProp>
            <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
          </BeanShellAssertion>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler" enabled="false">
          <stringProp name="BeanShellSampler.query">import org.json.*;

String order_type_id = vars.get(&quot;order_type_id&quot;);
String order_number = vars.get(&quot;order_number&quot;);
String date_create = vars.get(&quot;date_create&quot;);
//String ship_id = vars.get(&quot;ship_id&quot;);

String response = prev.getResponseDataAsString();
log.info(&quot;++++++++++++++++++++++++++++++++++++response: &quot;+response);

JSONObject orderInfoData = new JSONObject(response).getJSONObject(&quot;data&quot;);

String oidata = orderInfoData.toString();
log.info(&quot;++++++++++++++++++++++++++++++++++++oidata: &quot;+oidata);

// props.put(&quot;token&quot;,token); 

vars.put(&quot;oidata&quot;,oidata);

String data_otd = orderInfoData.getString(&quot;orderTypeId&quot;);

String data_on = orderInfoData.getString(&quot;orderNumber&quot;);

String data_dc = orderInfoData.getString(&quot;dateCreate&quot;);

if(data_otd.equals(order_type_id)) {
	
	if(data_on.equals(order_number)) {
		
		if(data_dc.equals(date_create)) {
			
			return (&quot;date_create、order_number和order_type_id与预期结果一致！！！！！！！！！！！！！！！！！&quot;);
			
		}else{
			
			return (&quot;date_create 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
		}
		
	}else{
		
		return (&quot;order_number 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
	}
	
}else{
	
	return (&quot;order_type_id 不一致！！！！！！！！！！！！！！！！！！！！&quot;);
}</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="MessageCount" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
	&quot;orderId&quot;: ${order_id}, &#xd;
	&quot;sender&quot;: ${sender}&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/c/chatting/messageCount</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">站内消息统计</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">isMainAccount</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0</stringProp>
              </elementProp>
            </collectionProp>
            <stringProp name="TestPlan.comments">头文件管理</stringProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LogOut" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ip}</stringProp>
          <stringProp name="HTTPSampler.port">${port}</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">${token}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">isMainAccount</stringProp>
                <stringProp name="Header.value">0</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
